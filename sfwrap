#! /usr/bin/python

import os
import sys
from subprocess import Popen, PIPE

sf_command = 'sysfuck'
prog_argv = sys.argv[1:]
stdbuf_argv = [ 'stdbuf', '-o0' ]

# Check whether we're specifying the sysfuck command path explicitly.
if len(sys.argv) >= 2 and sys.argv[1][0:2] == '-c':
    if len(sys.argv[1]) == 2: # It's in a separate argument.
        sf_command = sys.argv[2]
        prog_argv = sys.argv[3:]
    else: # It's like '-c/path/to/sysfuck'.
        sf_command = sys.argv[1][2:]
        prog_argv = sys.argv[2:]

# We want the controlling program to be able to communicate with the user, but
# stdin and stdout go to sysfuck. So we open new file descriptors to use
# instead, so the program can read(3, ...) and write(4, ...).
os.dup2(0, 3)
os.dup2(1, 4)

prog_process = Popen(stdbuf_argv + prog_argv, stdin=PIPE, stdout=PIPE)
# Specifying the executable separately means it doesn't get included in the
# sysfuck process' argv, which is what we want.
sf_process = Popen(prog_argv, executable=sf_command,
                   stdin=prog_process.stdout, stdout=prog_process.stdin)

# If one side of the pipeline exits but these are still open, then when the
# other side tries to do a read it will hang because it's listening on a pipe
# which has both ends open. By closing these, the read will fail immediately.
prog_process.stdout.close()
prog_process.stdin.close()

# By default, if the user presses ^C we get a python error message. The
# try/catch suppresses that.
try:
    prog_process.wait()
except KeyboardInterrupt:
    pass
